-- studentsnotes / Supabase schema.sql
-- Generated from the provided ERD (snake_case). Uses PostgreSQL types.
-- Run this in Supabase SQL editor.

-- Extensions (if needed by Supabase)
create extension if not exists "uuid-ossp";

-- ========== Tables ==========
create table if not exists carrera (
  id_carrera integer generated by default as identity primary key,
  clave varchar(20) not null unique,
  nombre varchar(150) not null
);

create table if not exists genero (
  id_genero smallint generated by default as identity primary key,
  clave char(1) not null unique check (clave in ('M','F','O')),
  descripcion varchar(50) not null
);

create table if not exists estudiante (
  id_estudiante integer generated by default as identity primary key,
  no_control varchar(30) not null unique,
  nombre varchar(100) not null,
  ap_paterno varchar(100) not null,
  ap_materno varchar(100),
  id_genero smallint not null references genero(id_genero),
  fecha_nacimiento date,
  id_carrera integer not null references carrera(id_carrera),
  fecha_alta date default now(),
  activo boolean default true
);

create table if not exists materia (
  id_materia integer generated by default as identity primary key,
  clave varchar(20) not null unique,
  nombre varchar(150) not null,
  unidades smallint not null check (unidades between 1 and 10),
  creditos smallint not null check (creditos between 1 and 30)
);

create table if not exists docente (
  id_docente integer generated by default as identity primary key,
  rfc varchar(20) not null unique,
  nombre varchar(100) not null,
  ap_paterno varchar(100) not null,
  ap_materno varchar(100),
  correo varchar(150) not null unique,
  activo boolean default true
);

create table if not exists termino (
  id_termino integer generated by default as identity primary key,
  anio smallint not null check (anio between 2000 and 2100),
  periodo varchar(20) not null, -- e.g., 'ENE-JUN', 'AGO-DIC'
  fecha_inicio date not null,
  fecha_fin date not null,
  unique(anio, periodo)
);

create table if not exists modalidad (
  id_modalidad smallint generated by default as identity primary key,
  nombre varchar(50) not null unique
);

create table if not exists grupo (
  id_grupo integer generated by default as identity primary key,
  id_materia integer not null references materia(id_materia),
  id_docente integer not null references docente(id_docente),
  id_termino integer not null references termino(id_termino),
  id_modalidad smallint not null references modalidad(id_modalidad),
  grupo_codigo varchar(20) not null,
  horario varchar(120),
  cupo smallint not null check (cupo between 1 and 200),
  unique(id_materia, id_docente, id_termino, grupo_codigo)
);

create table if not exists inscripcion (
  id_inscripcion integer generated by default as identity primary key,
  id_estudiante integer not null references estudiante(id_estudiante),
  id_grupo integer not null references grupo(id_grupo),
  fecha_inscripcion date default now(),
  status varchar(12) not null default 'ACTIVA'
    check (status in ('ACTIVA','BAJA','APROBADA','REPROBADA')),
  unique(id_estudiante, id_grupo)
);

create table if not exists evaluacion_unidad (
  id_evaluacion integer generated by default as identity primary key,
  id_inscripcion integer not null references inscripcion(id_inscripcion) on delete cascade,
  unidad smallint not null check (unidad between 1 and 10),
  calificacion numeric(5,2) not null check (calificacion between 0 and 100),
  fecha_eval date default now(),
  unique(id_inscripcion, unidad)
);

create table if not exists asistencia (
  id_asistencia integer generated by default as identity primary key,
  id_inscripcion integer not null references inscripcion(id_inscripcion) on delete cascade,
  unidad smallint not null check (unidad between 1 and 10),
  porcentaje numeric(5,2) not null check (porcentaje between 0 and 100),
  unique(id_inscripcion, unidad)
);

create table if not exists usuario (
  id_usuario integer generated by default as identity primary key,
  id_docente integer references docente(id_docente),
  email varchar(150) not null unique,
  password_hash varchar(255),
  rol varchar(20) not null default 'maestro' check (rol in ('admin','maestro')),
  activo boolean default true,
  ultimo_acceso timestamp with time zone,
  creado_en timestamp with time zone default now()
);

create table if not exists log_accion (
  id_log bigserial primary key,
  id_usuario integer not null references usuario(id_usuario),
  creado_en timestamp with time zone default now(),
  accion varchar(80) not null,
  ip varchar(64),
  detalle text
);

-- ========== Vistas ==========
create or replace view vw_inscripcion_detalle as
select
  i.id_inscripcion,
  e.id_estudiante, e.no_control, e.nombre as est_nombre, e.ap_paterno, e.ap_materno,
  c.id_carrera, c.nombre as carrera,
  g.id_grupo, g.grupo_codigo, g.horario, g.cupo,
  m.id_materia, m.nombre as materia,
  t.id_termino, t.anio, t.periodo,
  d.id_docente, d.nombre as doc_nombre, d.ap_paterno as doc_ap_paterno, d.ap_materno as doc_ap_materno,
  i.status, i.fecha_inscripcion
from inscripcion i
join estudiante e on e.id_estudiante = i.id_estudiante
join carrera c on c.id_carrera = e.id_carrera
join grupo g on g.id_grupo = i.id_grupo
join materia m on m.id_materia = g.id_materia
join termino t on t.id_termino = g.id_termino
join docente d on d.id_docente = g.id_docente;

-- KPIs ejemplo (puedes ampliar segÃºn necesidades)
create or replace view vw_kpis as
with calif_final as (
  select i.id_inscripcion,
         avg(eu.calificacion) as calif_prom,
         avg(a.porcentaje) as asis_prom
  from inscripcion i
  left join evaluacion_unidad eu on eu.id_inscripcion = i.id_inscripcion
  left join asistencia a on a.id_inscripcion = i.id_inscripcion
  group by i.id_inscripcion
), aprobado as (
  select id_inscripcion,
         case when calif_prom >= 70 then 1 else 0 end as aprobado
  from calif_final
)
select
  (select count(*) from estudiante) as estudiantes_totales,
  (select count(*) filter (where status='ACTIVA') from inscripcion) as inscripciones_activas,
  round( (100.0 * avg(aprobado))::numeric, 2) as tasa_aprobacion_global,
  round( (avg(asis_prom))::numeric, 2) as asistencia_promedio
from aprobado ap
left join calif_final cf on cf.id_inscripcion = ap.id_inscripcion;

-- ========== RLS enable ==========
alter table carrera enable row level security;
alter table genero enable row level security;
alter table estudiante enable row level security;
alter table materia enable row level security;
alter table docente enable row level security;
alter table termino enable row level security;
alter table modalidad enable row level security;
alter table grupo enable row level security;
alter table inscripcion enable row level security;
alter table evaluacion_unidad enable row level security;
alter table asistencia enable row level security;
alter table usuario enable row level security;
alter table log_accion enable row level security;
alter view vw_inscripcion_detalle set (security_invoker = on);
alter view vw_kpis set (security_invoker = on);
